import{_ as c}from"./plugin-vue_export-helper-c27b6911.js";import{r,o as l,c as d,a as e,b as a,d as t,w as n,e as i}from"./app-7082fc8a.js";const h={},p=e("h2",{id:"folders",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#folders","aria-hidden":"true"},"#"),a(" Folders")],-1),m=e("br",null,null,-1),g=i('<p>The correct setting (<code>Prefix</code>, <code>Mixed</code>, or <code>Full</code>) for your system typically depends on the name of the target package for the repository as well as<br> your naming conventions.</p><h3 id="limitations" tabindex="-1"><a class="header-anchor" href="#limitations" aria-hidden="true">#</a> Limitations</h3><p>When creating a repository for your own package(s) or installing a third-party repository, the setting (when you create the repository in your system) does not have to match the setting<br> defined in the third-party repository. However, not all possible combinations are possible due to length restrictions of SAP package names.</p><p>For example, if your target package name is already 20 characters long, installing a repository with mode <code>Prefix</code> and folder names longer than<br> 10 chararacters will lead to an error message since the resulting sub-package name will become too long.</p><h3 id="troubleshooting" tabindex="-1"><a class="header-anchor" href="#troubleshooting" aria-hidden="true">#</a> Troubleshooting</h3><p><code>Unexpected package naming ({ package }). You might switch the folder logic</code></p><p><code>Folder logic: length = 0, parent: { parent_package }, child: { package }</code></p><p>If these errors occur, then the package hierarchy cannot be converted to a folder structure for the given folder logic. First, try to use a different<br> folder logic. If this does not work, change the naming conventions and possibly use a starting package with a shorter name.</p><p><code>Package { package } exceeds ABAP 30-characters name limit</code></p><p>Try to use a starting package with a shorter name. If this does not work, use a different folder logic.</p><p><code>Package { package } has a sub-package with the same name</code></p><p>This error can happen if you try to install a repository with folder logic <code>Prefix</code> into a system where you selected folder logic <code>Full</code>.<br> Try using <code>Prefix</code> as in the original repository.</p><h3 id="technical-details" tabindex="-1"><a class="header-anchor" href="#technical-details" aria-hidden="true">#</a> Technical Details</h3>',13),f={href:"https://github.com/abapGit/abapGit/blob/main/src/objects/core/zcl_abapgit_folder_logic.clas.abap",target:"_blank",rel:"noopener noreferrer"},b=e("code",null,"zcl_abapgit_folder_logic",-1),u=e("code",null,"package_to_path",-1),_=e("code",null,"path_to_package",-1),y=e("h2",{id:"files",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#files","aria-hidden":"true"},"#"),a(" Files")],-1),k=e("br",null,null,-1),j=i("<p>For example, DDIC objects are mapped to one file, programs are mapped to two files, and classes as well as function groups are mapped to several files.</p><p>Filenames has the following convertion:</p><p><code>&lt;object name&gt;.&lt;object type&gt;.&lt;extension&gt;</code> or <code>&lt;object name&gt;.&lt;object type&gt;.&lt;object part&gt;.&lt;extension&gt;</code></p><p>The common extensions are <code>.xml</code> and <code>.json</code> for metadata as well as <code>.abap</code> for any coding. Other extensions are possible and used,<br> for example, for MIME objects.</p>",4),w={href:"https://github.com/abapGit-tests",target:"_blank",rel:"noopener noreferrer"},x=e("br",null,null,-1),S={href:"https://github.com/SAP/abap-file-formats",target:"_blank",rel:"noopener noreferrer"},P=e("h3",{id:"special-cases",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#special-cases","aria-hidden":"true"},"#"),a(" Special Cases")],-1),T=e("p",null,"There are some files with special meaning:",-1),v=e("p",null,[e("code",null,".abapgit.xml")],-1),A=e("p",null,[e("code",null,".apack-manifest.xml")],-1),F=i("<li><p><code>package.devc.xml</code></p><p>abapGit repositories do not store any SAP package names. Only the package metadata is stored in these XML files. When installing a repository, abapGit will map the folder names to the SAP packages (see above).</p></li><li><p><code>#namespace#</code> or <code>(namespace)</code></p><p><code>/NAMESPACE/</code> in SAP object names is mapped to <code>#namespace#</code> in XML filenames and <code>(namespace)</code> in JSON filenames.</p></li>",2),G=i('<h3 id="limitations-1" tabindex="-1"><a class="header-anchor" href="#limitations-1" aria-hidden="true">#</a> Limitations</h3><p>Git has a limit of 4096 characters for filenames. This is way more than required and allowed for many object names in SAP systems. Therefore,<br> creating files directly in git (manually or via automation) is limited by the possible object names in SAP systems. It&#39;s highly recommended<br> to always create objects in an SAP system and then push them to the repository.</p><p>Some characters used in SAP object names are not allowed in git filenames. Also some characters in object names cause problems when identifying<br> the object later. Therefore, abapGit will escape such characters. Examples: <code>%, #, ., =, ?, &lt;, &gt;</code>.</p><p>There are cases where the name of an object is <em>not</em> unique across systems. This is usually the case if the object name is generated by the<br> SAP system when creating the object. Examples are object names based on GUIDs or number ranges. abapGit will map such object names to a unique,<br> system independent identifier. Example: ICF Services (<code>SICF</code>).</p><h3 id="troubleshooting-1" tabindex="-1"><a class="header-anchor" href="#troubleshooting-1" aria-hidden="true">#</a> Troubleshooting</h3>',5),I=e("br",null,null,-1),E={href:"https://github.com/sbcgua/ajson/issues",target:"_blank",rel:"noopener noreferrer"},C=e("h3",{id:"technical-details-1",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#technical-details-1","aria-hidden":"true"},"#"),a(" Technical Details")],-1),R={href:"https://github.com/abapGit/abapGit/blob/main/src/objects/core/zcl_abapgit_filename_logic.clas.abap",target:"_blank",rel:"noopener noreferrer"},N=e("code",null,"zcl_abapgit_filename_logic",-1),L=e("code",null,"object_to_file",-1),M=e("code",null,"file_to_object",-1),q=i('<h2 id="related-checks" tabindex="-1"><a class="header-anchor" href="#related-checks" aria-hidden="true">#</a> Related Checks</h2><p><code>Changed package assignment for object { type } { name }</code></p><p>If an object is assigned to a different package/folder in the repository, abapGit will show a warning. Pulling such objects will automatically<br> reassign the object to the new pacakge.</p><p><code>Files for object { type } { name } are not placed in the same folder</code></p><p>For objects that are split into several files, all files must be included in the same folder. This can happen if files are moved manually in git.<br> To resolve the issue, move the files to the same folder in git.</p><p><code>Package { package } already exists but is not a sub-package of { top package }. Check your package and folder logic, and either assign { package } to the package hierarchy of { top package } or remove package { package } from the repository.</code></p><p>If package already exist but is not included in the package hierarchy of the package assigned to the repository, then a manual change of the package<br> is required i.e. setting a parent package to the repo package (or one of its sub-packages). We don&#39;t do this automatically since it&#39;s not clear where in the<br> hierarchy the new package should be located or whether the sub package shall be removed from the repo.</p><p><code>Package and path do not match for object { type } { name }</code></p><p>This warning can happen if an object that is part of the repository exists already in the SAP system but is <em>not</em> included in the package hierarchy.<br> Either delete the object (and pull it from the repo afterwards) or assign it to a package in the hierarchy.</p><p><code>Multiple files with same filename { filename }</code></p><p>Aside from the special name for packages (<code>package.devc.xml</code>) all filenames in the repository (under the starting folder) must be unique. If this is<br> not the case, rename the files accordingly.</p><p><code>Filename is empty for object { type } { name }</code></p>',12),O={href:"https://github.com/sbcgua/ajson/issues",target:"_blank",rel:"noopener noreferrer"},z=i('<p><code>Namespace { namespace } does not exist. Pull it first (or create it in transaction SE03)</code></p><p>If repository objects are based on a namespace, the namespace must be created first before other objects can be pulled. Either pull <em>only</em> the namespace, or create the namespace in transaction <code>SE03</code> manually.</p><p><code>Namespace { namespace } is not modifiable. Check it in transaction SE03</code></p><p>Set the namespace to <code>modifiable</code> in transaction <code>SE03</code>.</p><p><code>Package { package } is not in namespace { namespace }. Remove repository and use a different package</code></p><p>The root package of a repository must adhere to the naming convention of the namespace used in the repository. Use &quot;Advanced &gt; Remove&quot; to remove the repository and create the repository again with a package name that begins with <code>/namespace/</code>.</p><h3 id="technical-details-2" tabindex="-1"><a class="header-anchor" href="#technical-details-2" aria-hidden="true">#</a> Technical Details</h3>',7),D={href:"https://github.com/abapGit/abapGit/blob/main/src/objects/core/zcl_abapgit_file_status.clas.abap",target:"_blank",rel:"noopener noreferrer"},B=e("code",null,"zcl_abapgit_file_status",-1);function U(V,J){const s=r("RouterLink"),o=r("ExternalLinkIcon");return l(),d("div",null,[p,e("p",null,[a("abapGit is mapping SAP packages and sub-packages to folders in the git repository. There are three options for defining the folder logic (mapping mode) which"),m,a(" are described in the "),t(s,{to:"/user-guide/repo-settings/dot-abapgit.html#folder-logic"},{default:n(()=>[a("Repository Settings")]),_:1}),a(".")]),g,e("p",null,[a("The mapping is implemented in class "),e("a",f,[b,t(o)]),a(", methods "),u,a(" (SAP to Repo) and "),_,a(" (Repo to SAP).")]),y,e("p",null,[a("abapGit is mapping SAP objects and object parts to files in the git repository. For each object (for "),t(s,{to:"/user-guide/reference/supported.html"},{default:n(()=>[a("supported object types")]),_:1}),a("), at least one file is being created. Often there are two files, one containing the object metadata and one containing the coding. Some object are split into several files"),k,a(" to allow for easier editing and change tracking in git.")]),j,e("p",null,[a("You can find examples for most object types in the "),e("a",w,[a("abapGit Test Repositories"),t(o)]),a(".")]),e("p",null,[a("The metadata is stored either in XML or JSON format. JSON format has been introduced for some object and is based the"),x,e("a",S,[a("ABAP File Format"),t(o)]),a(".")]),P,T,e("ol",null,[e("li",null,[v,e("p",null,[a("This file contains "),t(s,{to:"/user-guide/repo-settings/dot-abapgit.html"},{default:n(()=>[a("meta information")]),_:1}),a(" of the abapGit project. The file must be located in the root folder of the git repository.")])]),e("li",null,[A,e("p",null,[a("This is an optional file which can be used to define "),t(s,{to:"/user-guide/reference/apack.html"},{default:n(()=>[a("package dependencies")]),_:1}),a(" for your project.")])]),F]),G,e("p",null,[a("It's possible that SAP object names contain characters that are not valid for git filenames. In such case, please open an"),I,e("a",E,[a("issue"),t(o)]),a(".")]),C,e("p",null,[a("The mapping is implemented in class "),e("a",R,[N,t(o)]),a(", methods "),L,a(" (SAP to Repo) and "),M,a(" (Repo to SAP).")]),q,e("p",null,[a("Unknown causes. Open an "),e("a",O,[a("issue"),t(o)]),a(".")]),z,e("p",null,[a("The checks are implemented in class "),e("a",D,[B,t(o)]),a(".")])])}const Y=c(h,[["render",U],["__file","folders-filenames.html.vue"]]);export{Y as default};
