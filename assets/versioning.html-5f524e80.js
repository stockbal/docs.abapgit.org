import{_ as s,X as l,Y as c,Z as t,$ as e,a0 as a,a1 as i,a2 as d,H as r}from"./framework-c1ee72d8.js";const h={},p=t("p",null,"abapGit does not have a predefined release cycle. However, we strive to tag a new version once a month (or two).",-1),_=t("h2",{id:"version",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#version","aria-hidden":"true"},"#"),e(" Version")],-1),g={href:"https://semver.org/",target:"_blank",rel:"noopener noreferrer"},u=t("p",null,[e("Example release sequence: "),t("code",null,"1.118.0 > 1.119.0 > 1.120.0")],-1),m=t("h2",{id:"changelog",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#changelog","aria-hidden":"true"},"#"),e(" Changelog")],-1),b=t("p",null,"Reorgs, refactoring, or changes related to testing or repo actions are omitted from the changelog.",-1),f={href:"https://github.com/abapGit/abapGit/commits/main",target:"_blank",rel:"noopener noreferrer"},v=t("h2",{id:"process",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#process","aria-hidden":"true"},"#"),e(" Process")],-1),w=t("p",null,"The following steps need to be taken to create a new abapGit version:",-1),x=t("li",null,[e("Create a new branch name like the new version. For example, "),t("code",null,"v1.121.0"),e(".")],-1),G=t("code",null,"zif_abapgit_version",-1),k={href:"https://github.com/abapGit/abapGit/blob/main/src/zif_abapgit_version.intf.abap",target:"_blank",rel:"noopener noreferrer"},y=t("code",null,"c_abap_version",-1),C=t("code",null,"'1.120.0' > '1.121.'",-1),E=t("code",null,"changelog.txt",-1),L={href:"https://github.com/abapGit/abapGit/blob/main/changelog.txt",target:"_blank",rel:"noopener noreferrer"},T=t("code",null,"main",-1),V={href:"https://github.com/abapGit/abapGit/compare/v1.120.0...main",target:"_blank",rel:"noopener noreferrer"},q=t("code",null,"v1.120.0",-1),H=t("code",null,"main",-1),N=d("<li>Label each change (PR) corresponding to the legend (<code>*</code>: fixed, <code>!</code>: changed, <code>+</code>: added, <code>-</code>: removed).</li><li>Create a new, draft pull request from the new branch.</li><li>Have the changes reviewed by someone else.</li><li>On the release day, update the date in the changelog, and merge the pull request.</li>",4),R=t("p",null,[e("The merge will trigger a GitHub action to automatically tag the new release and perform some downstream tasks (like updating the "),t("code",null,"build"),e(" repository).")],-1);function z(B,A){const o=r("RouterLink"),n=r("ExternalLinkIcon");return l(),c("div",null,[t("p",null,[e("abapGit is continuously developed and updated. The main branch always represents the latest "),a(o,{to:"/user-guide/getting-started/install.html"},{default:i(()=>[e("development version")]),_:1}),e(" and corresponds to the published "),a(o,{to:"/user-guide/getting-started/install.html"},{default:i(()=>[e("standalone version")]),_:1}),e(".")]),p,_,t("p",null,[e("abapGit follows "),t("a",g,[e("semantic version"),a(n)]),e(" format. The community has settled on releasing enhancements and changes as minor versions. A more granular approach to releasing every change as a patch is adding too much overhead.")]),u,m,t("p",null,[e("All additions, changes, fixes, and removals that are relevant to abapGit users are listed in the "),a(o,{to:"/development-guide/read-first/changelog.html"},{default:i(()=>[e("changelog")]),_:1}),e(".")]),b,t("p",null,[e("Since abapGit is enforcing a linear history, you can find all changes in "),t("a",f,[e("commit list"),a(n)]),e(" of the main branch.")]),v,w,t("ol",null,[x,t("li",null,[e("Update "),G,e("("),t("a",k,[e("https://github.com/abapGit/abapGit/blob/main/src/zif_abapgit_version.intf.abap"),a(n)]),e(") and increase the minor version of constant "),y,e(" by one. Example: "),C,e(".")]),t("li",null,[e("Update "),E,e("("),t("a",L,[e("https://github.com/abapGit/abapGit/blob/main/changelog.txt"),a(n)]),e(") and add a section at the top for the new version.")]),t("li",null,[e("Compile a list of the relevant pull requests (see above) based on a comparison between the most recent tag and "),T,e(". For example, "),t("a",V,[q,e(" vs "),H,a(n)]),e(".")]),N]),R])}const I=s(h,[["render",z],["__file","versioning.html.vue"]]);export{I as default};
