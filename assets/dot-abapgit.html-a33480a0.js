import{_ as s,X as t,Y as i,Z as l,$ as a,a0 as o,a1 as r,a2 as e,H as c}from"./framework-c1ee72d8.js";const p="/img/repo_settings.png",d="/img/utilities.png",u="/img/repo_settings_menu.png",g="/img/repo_settings_abapgit_xml.png",h={},m=e('<p><strong><code>.abapgit.xml</code></strong> is a special abapGit file. It contains meta information of the abapGit project. The file must be located in the root folder of the git repository.</p><p>It is recommended to edit .abapgit.xml using &quot;Repository Settings&quot; <img src="'+p+'" alt="" loading="lazy"> in abapGit. (In exceptional cases, you could edit the XML directly via &quot;Utilities &gt; Database Util&quot; <img src="'+d+'" alt="" loading="lazy">.)</p><figure><img src="'+u+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>Example: abapGit&#39;s own <code>.abapgit.xml</code></p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">asx:</span>abap</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>asx</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.sap.com/abapxml<span class="token punctuation">&quot;</span></span> <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1.0<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">asx:</span>values</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>DATA</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MASTER_LANGUAGE</span><span class="token punctuation">&gt;</span></span>E<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>MASTER_LANGUAGE</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>STARTING_FOLDER</span><span class="token punctuation">&gt;</span></span>/src/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>STARTING_FOLDER</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>FOLDER_LOGIC</span><span class="token punctuation">&gt;</span></span>PREFIX<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>FOLDER_LOGIC</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>DATA</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">asx:</span>values</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">asx:</span>abap</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="repository-settings" tabindex="-1"><a class="header-anchor" href="#repository-settings" aria-hidden="true">#</a> Repository Settings</h2><p>The following settings are stored in the repository and therefore valid for all users.</p><figure><img src="`+g+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="main-language" tabindex="-1"><a class="header-anchor" href="#main-language" aria-hidden="true">#</a> Main Language</h3><p>The main language is the languages in which all texts belonging to repository objects will be created. It follows the SAP <code>sy-langu</code> values. Note that this implies that all objects in a repository must have the same main language.</p><p><strong>Note:</strong> abapGit does <em>not</em> support changing the main language of objects. Therefore, this setting can not be changed using abapGit. If the main language was changed in the git repository, you will have to uninstall the repository your system (in the current main language) and reinstall it (in the new main language).</p><h3 id="translation-languages" tabindex="-1"><a class="header-anchor" href="#translation-languages" aria-hidden="true">#</a> Translation Languages</h3><p>There are currently two options available for including translations in a repository:</p><ol><li>Object-specific logic provided by the object serializer class</li><li>Generic logic provided by abapGit framework (experimental, #4415)</li></ol>',14),v=e(`<p>Note: You can suppress translations with the local &quot;Only Serialize Main Language&quot; setting (see below).</p><h3 id="starting-folder" tabindex="-1"><a class="header-anchor" href="#starting-folder" aria-hidden="true">#</a> Starting Folder</h3><p>The Git repository folder that defines the root folder where deserialization starts.</p><h3 id="folder-logic" tabindex="-1"><a class="header-anchor" href="#folder-logic" aria-hidden="true">#</a> Folder Logic</h3><p>abapGit follows three folder logics: &quot;Prefix&quot;, &quot;Full&quot;, and &quot;Mixed&quot;.</p><h4 id="prefix" tabindex="-1"><a class="header-anchor" href="#prefix" aria-hidden="true">#</a> Prefix</h4><p>A package name must contain its parent package name as a prefix. Examples:</p><p>Valid package prefix:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>ZFOO
  ZFOO_BAR
    ZFOO_BAR_QUX
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This will produce the following folder structure:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>/src
/src/bar
/src/bar/qux
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Invalid package prefix:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>ZFOO
  ZBAR
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>The folder logic PREFIX allows to install a repository into a different parent package (in different systems). This can even be local packages (<code>$*</code>), in which case no transport order is required.</p><h4 id="full" tabindex="-1"><a class="header-anchor" href="#full" aria-hidden="true">#</a> Full</h4><p>Any package name is accepted.</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>ZBASE
  ZSOMETHING
    ZHELLO
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This will produce the following folder structure:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>/src
/src/zsomething
/src/zsomething/zhello
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The folder logic FULL forces the installation of a repository into packages with exactly the same name. Note that this can be problematic for contributors who use a system where specific prefixes for the package names are to be used.</p><h4 id="mixed" tabindex="-1"><a class="header-anchor" href="#mixed" aria-hidden="true">#</a> Mixed</h4><p>The folder logic MIXED combines PREFIX and FULL. The root package name will be used as prefix for all sub-packages but the package names are not concatenated recursively. This will allow to use significantly logic package names.</p><p>Example package hierarchy:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>ZBASE
  ZBASE_ZFOO
    ZBASE_ZBAR
      ZBASE_ZSUB_PACK_WITH_LONG_NAME
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This will produce the following folder structure:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>/src
/src/zfoo
/src/zfoo/zbar
/src/zfoo/zbar/zsub_pack_with_long_name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="ignore-files" tabindex="-1"><a class="header-anchor" href="#ignore-files" aria-hidden="true">#</a> Ignore Files</h3><p>Files which abapGit will not download to your ABAP system. Typically, this includes references to readme, changelog, and license files as well as repository configuration related to workflows like build or linting jobs.</p><p>Assuming that default starting folder /src/ is used, any files in root / or any other folder than the starting folder are ignored automatically. Therefore it will not be necessary to list files of the root folder into the ignore list (and as a consequence, the default ignore list is empty).</p><p>The ignore logic is based on &quot;covers pattern&quot; operator (not regex). A file is ignored, if path &amp; file covers at least one of the patterns listed in this setting.</p><p>Example: <code>/src/hr/zcl_confidential*</code> will ignore all classes in the /src/hr package that begin with <code>zcl_confidential</code>.</p><h3 id="requirements" tabindex="-1"><a class="header-anchor" href="#requirements" aria-hidden="true">#</a> Requirements</h3><p>In this section, you can specify the minimum requirements that should be fulfilled to allow installation of the repository. Listed software components should exist in the target system and be at the given release or higher. If the target system matches the minimum release, then it must also be at the given patch level or higher.</p>`,33);function f(b,k){const n=c("RouterLink");return t(),i("div",null,[m,l("p",null,[a("If no translation languages are maintained in this setting, the first approach is used. If you maintain a list of translation languages (comma-separated, 2-letter ISO language codes), then these languages will be included in the serialization. See also "),o(n,{to:"/user-guide/reference/translations.html"},{default:r(()=>[a("Translations and i18n")]),_:1})]),v])}const _=s(h,[["render",f],["__file","dot-abapgit.html.vue"]]);export{_ as default};
